// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:

	
	DMux8Way(in=load,sel=address,a=a,b=b,c=c,d=d,e=e,f=f,g=g,h=h); 
	//if adress == 000 then {a, b, c, d, e, f, g, h} = {load, 0, 0, 0, 0, 0, 0, 0}
	//if adress == 001 then {a, b, c, d, e, f, g, h} = {0, load, 0, 0, 0, 0, 0, 0} etc

	Register(in=in,load=a,out=oa); // load = load if adress == 000, else load = 0
	Register(in=in,load=b,out=ob); // load = load if adress == 001, else load = 0 etc..
	Register(in=in,load=c,out=oc);
	Register(in=in,load=d,out=od);
	Register(in=in,load=e,out=oe);
	Register(in=in,load=f,out=of);
	Register(in=in,load=g,out=og);
	Register(in=in,load=h,out=oh);

	Mux8Way16(a=oa,b=ob,c=oc,d=od,e=oe,f=of,g=og,h=oh,sel=address,out=out);
	//out=oa if adress == 000
	//out=ob if adress == 001, etc..
}